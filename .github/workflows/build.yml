# build.yml

name: turbo-spoon
#description: 'Builds and publishes the container image to ghcr.io'
on:
  schedule:
    - cron: '00 22 * * *'  # 22:00 UTC everyday
  push:
    branches:
      - master
    paths-ignore:
      - '**/README.md'
env:
  IMAGE_NAME: turbo-spoon
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  
jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        major_version: [38]
        include:
          - major_version: 38
            is_latest: true
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v3
        
      # Run script to generate tags
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Add shortform SHA256 tag
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          # Add date tag
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          alias_tags=()
          # Add major version tag
          alias_tags+=("${{ matrix.major_version }}")
          # Add "latest" tag
          if [[ "${{ matrix.is_latest }}" == "true" ]]; then
            alias_tags+=("latest")
          fi
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
        
      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
            ${{ steps.generate-tags.outputs.date }}
            ${{ steps.generate-tags.outputs.sha_short }}
          build-args: |
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          oci: true
        
      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      # Sign container
      - uses: sigstore/cosign-installer@main

      # Only needed when running `cosign sign` using a key
      - name: Write signing key to disk
        run: |
          echo "${{ env.COSIGN_PRIVATE_KEY }}" > cosign.key
          # DEBUG: get character count of key
          wc -c cosign.key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign container image
        run: |
          cosign sign --key cosign.key ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
